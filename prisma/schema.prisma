// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(USER)

  bookings Booking[]

  @@map("users")
}

model Appointment {
  id   String   @id @default(cuid())
  date DateTime @unique

  timeSlots TimeSlot[]

  @@map("appointments")
}

model TimeSlot {
  id            String         @id @default(cuid())
  appointmentId String
  startTime     String
  endTime       String
  period        TimeSlotPeriod
  status        TimeSlotStatus @default(NOTBOOKED)

  Appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  Booking     Booking?

  @@unique([appointmentId, startTime, endTime, period])
  @@map("timeSlots")
}

model Booking {
  id         String  @id @default(cuid())
  userId     String
  timeSlotId String  @unique
  name       String
  phoneNo    String
  message    String?

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  TimeSlot TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)

  @@unique([userId, timeSlotId])
  @@map("bookings")
}

enum UserRole {
  USER
  ADMIN
}

enum TimeSlotPeriod {
  AM
  PM
}

enum TimeSlotStatus {
  BOOKED
  NOTBOOKED
  CANCELLED
  DONE
}
